装饰器模式：结构型模式
允许向一个现有对象添加新的功能，同时又不改变其结构。
这种模式创建了一个装饰类，用来包装原有的类，并保持类方法签名完整性的前提下，提供了额外的功能
一般的，我们扩展一个类经常使用继承，但是随着扩展的功能增多，子类就会膨胀，在不增加子类的情况下扩展类
装饰器模式可用来替代继承

例如：饮料店卖饮料Drink，包括奶茶，橙汁，咖啡等
饮料可以加糖，加冰块等各种辅料
传统实现方式，在Drink中维护所有辅料类，但是这会出现一个问题，辅料繁多且品种会增加，同时一瓶饮料可能会加各种辅料组合，每种组合都是一款
独立的饮料，如果将加了各种辅料的饮料作为一个类看待，那么维护起来就会很复杂，导致子类过多
装饰器模式：创建一个装饰器类Decorator，这个装饰器类继承于被装饰类（原类型）Drink，装饰器类内部维护了一个被装饰类，装饰器类的子类对象
（例如加糖装饰类SugarDecorator）就对内部的被装饰类对象进行相应的增强(加糖)

JDK中的案例：
InputStream的装饰类FilterInputStream
public class FilterInputStream extends InputStream {
   /**
    * The input stream to be filtered.
    */
   protected volatile InputStream in;
}